Bubble sort
Insertion sort
Selection sort
Merge sort		-> recursive, iterative, linked list
Quick sort 		-> recursive, iterative, linked list
Heap sort
Counting sort
Radix sort

Given an array A[] and a number x, check for pair in A[] with sum as x
	->Given an array A[] and a number x, check for 4 numbers in A[] with sum as x
	->Given an array A[] and a number x, check for pair in A[] which is multiple of x
majority element in sorted array
	->find first occurence of a number in a sorted array
kadane algo -  (logic) max subarray ending at any index
	->max sum subarray
	->max sum subarray with negative numbers
	->max product subarray
	->max sum subarray with no consecutive
search an element in sorted and rotated array
	->find first occurence of a number in a sorted and rotated array
reversal algo for array rotation
count no of inversions

two elements whose sum is closest to zero
max sum such that no two elements are adjacent


---------------------------------------------




--Maximum sum such that no two elements are adjacent
--Sort elements by frequency | Set 1
--Maximum and minimum of an array using minimum number of comparisons :   tournament method
k largest(or smallest) elements in an array | added Min Heap method
Maximum difference between two elements
--Union and Intersection of two sorted arrays
--Floor and Ceiling in a sorted array
A Product Array Puzzle
--Segregate Even and Odd numbers
Find the two repeating elements in a given array
Sort an array of 0s, 1s and 2s
Find the Minimum length Unsorted Subarray, sorting which makes the complete array sorted
Find duplicates in O(n) time and O(1) extra space
Equilibrium index of an array
Which sorting algorithm makes minimum number of memory writes?
Turn an image by 90 degree
Next Greater Element
Check if array elements are consecutive | Added Method 3
-Find the smallest missing number
-Count the number of occurrences in a sorted array
Interpolation search vs Binary search
Given an array arr[], find the maximum j â€“ i such that arr[j] > arr[i]
Maximum of all subarrays of size k (Added a O(n) method)
Find whether an array is subset of another array | Added Method 3
Find the minimum distance between two numbers
Find the repeating and the missing | Added 3 new methods
--Median in a stream of integers (running integers) :   insertion sort, left and right of root are heaps
Find a Fixed Point in a given array
Maximum Length Bitonic Subarray




int maxSumWithoutTakingAdjacent(int arr[]) {
	int temp1=arr[0], temp2=0;
	int temp;
	for(int i=1; i<arr.length; i++) {
		temp = temp1;
		temp1 = arr[i]+temp2;
		temp2 = max(temp2, temp);
	}
	return max(temp1, temp2);
}




-----------------------------------------------




boolean sumAsX(int arr[], int x) {
	Arrays.sort(arr);
	int start=0;
	int end=arr.length-1;
	while(start<end) {
		int sum = arr[start]+arr[end];
		if(sum == x) {
			return true;
		} else if(sum > x) {
			end--;
		} else {
			start++;
		}
	}
	return false;
}

--------------------------

m=n^2
mlogm
n2logn

boolean fourDigitSumAsX(int arr[], int x) {
	
	DigitPair digitPairArr[] = new DigitPair[arr.length * (arr.length-1)/2 ];
	int indexCounter=0;
	for(int i=0;i<arr.length-1;i++) {
		for(int j=i+1;j<arr.length;j++) {
			digitPairArr[indexCounter++]=new DigitPair(i,j,arr[i]+arr[j]);
		}
	}
	Arrays.sort(digitPairArr);
	
	int start=0;
	int end=digitPairArr.length-1;
	while(start<end) {
		int sum = digitPairArr[start].sum + digitPairArr[end].sum;
		if(sum == x && hasDifferentIndexes(digitPairArr[start], digitPairArr[end])) {
			return true;
		} else if(sum > x) {
			end--;
		} else {
			start++;
		}
	}
	return false;
}

class DigitPair implements Comparable<DigitPair> {
	private int indexOfA;
	private int indexOfB;
	private int sum;
	
	DigitPair(int indexOfA,int indexOfB,int sum) {
		this.indexOfA=indexOfA;
		this.indexOfB=indexOfB;
		this.sum=sum;
	}
	
	boolean hasDifferentIndexes(DigitPair ob1, DigitPair ob2) {
		return (ob1.indexOfA != ob2.indexOfA && ob1.indexOfA != ob2.indexOfB) && 
		(ob1.indexOfB != ob2.indexOfA && ob1.indexOfB != ob2.indexOfB);
	}
	
	@Override
	public int compareTo(DigitPair digitPair) {
		if(this.sum > digitPair.sum)
			return 1;
		else if(this.sum < digitPair.sum) 
			return -1;
		else return 0;
	}
}

-------------------------

int majority(int arr[]) {
	int maxOccurNumber = arr[0];
	int maxOccurCount=1;
	for(int i=1;i<arr.length;i++) {
		if(maxOccurNumber==arr[i]) {
			maxOccurCount++;
		} else {
			maxOccurCount--;
			if(maxOccurCount==0) {
				maxOccurNumber=arr[i];
				maxOccurCount=1;
			}
		}
	}
	int count=0;
	for(int i=0;i<arr.length;i++) {
		if(arr[i]==maxOccurNumber) {
			count++
		}
	}
	if(count>arr.length/2) {
		return maxOccurNumber;
	}
	return -1;
}

------------------------------------

int majorityInSorted(int arr[]) {
	int mid = arr.length/2;
	if(arr[mid] == arr[arr.length-1]) {
		return arr[mid];
	} else if(arr[mid] == arr[0]) {
		return arr[mid];
	} else {
		int smallIndex = findFirstIndexSmallerThanX(arr,0,mid-1,arr[mid]);
		int largeIndex = findFirstIndexLargerThanX(arr,mid+1,arr.length-1, arr[mid]);
		if(smallIndex != -1 && largeIndex != null && largeIndex-smallIndex > arr.length/2) {
			return arr[mid];
		} else {
			return -1;
		}
	}
}

int findFirstIndexSmallerThanX(int arr[],int low,int high, int x) {
	if(low<=high) {
		int mid = low+(high-low)/2;
		if(arr[mid] == x) {
			return findFirstIndexSmallerThanX(arr,low,mid-1,x);
		}
		else {
			if(arr[mid+1] == x) {
				return mid;
			} else {
				return findFirstIndexSmallerThanX(arr,mid+2,high,x);
			}
		}
	}
	return -1;
}

int findFirstIndexLargerThanX(int arr[],int low,int high, int x) {
	if(low<=high) {
		int mid = low+(high-low)/2;
		if(arr[mid] == x) {
			return findFirstIndexLargerThanX(arr,mid+1,high,x);
		}
		else {
			if(arr[mid-1] == x) {
				return mid;
			} else {
				return findFirstIndexLargerThanX(arr,low,mid-2,x);
			}
		}
	}
	return -1;
}

------------------------------------

kadane algo:
https://www.youtube.com/watch?v=86CQq3pKSUw

max ending here
local max 

int largestSumSubArray(int arr[]) {
	int maxEndingHere = arr[0];
	int maxSoFar = arr[0];
	for(int i=1; i<arr.length; i++) {
		maxEndingHere = max(arr[i], arr[i]+maxEndingHere);
		maxSoFar = max(maxSoFar, maxEndingHere)
	}
	return maxSoFar;
}


void printLargestSumSubArray(int arr[]) {
	
}

------------------------------------

largest rectangle in 2D array



------------------------------------

int findPivot(int arr[], int low, int high) {
	if(high>=low) {
		int mid = low + (high-low)/2;
		if(arr[mid] > arr[mid+1])
			return mid+1;
		else if(arr[mid-1] > arr[mid])
			return mid;
		if(arr[mid] < arr[low]) {
			return findPivot(arr,low,mid-1);
		}
		return findPivot(arr,mid+1,high);
	}
	return -1;
}

------------------------------------

void reverseArray(int arr[]) {
	int start=0;
	int end=arr.length-1;
	int temp;
	while(start<=end) {
		temp=arr[start];
		arr[start]=arr[end];
		arr[end]=temp;
		start++;
		end--;
	}
}

------------------------------------

void arrayRotation(int arr[], int n , int d) {
	reverseArray(arr,0,d-1);
	reverseArray(arr,d,n-1);
	reverseArray(arr,1,n-1);
}

------------------------------------

int sortedArraysMedian(int arr1[], int arr2[]) {
	
}

------------------------------------

void leadersInArray(int arr[]) {
	if(arr.length>0) {}
		System.out.println(arr[arr.length-1]);
		int leader = arr[arr.length-1];
		for(int i=arr.length-2; i>=0; i--) {
			if(arr[i]>leader) {
				leader = arr[i];
				System.out.println(leader);
			}
		}
	}
}

------------------------------------

int countInversions(int arr[]) {
	
}

------------------------------------

