Graph_notes

Important links :
https://www.quora.com/Why-are-Depth-First-Search-and-Breadth-First-Search-called-so
http://stackoverflow.com/questions/11468621/why-is-the-time-complexity-of-both-dfs-and-bfs-o-v-e
https://github.com/google/guava/tree/master/guava/src/com/google/common/graph

http://www.geeksforgeeks.org/bridge-in-a-graph/
http://stackoverflow.com/questions/28917290/how-can-i-find-bridges-in-an-undirected-graph
http://stackoverflow.com/questions/11218746/bridges-in-a-connected-graph


------------------------

undirected graph terminologies :

=>adjacent vertices : vertices joined by an edge
=>degree : no of edges connected to a vertex
=>sum of degree of all vertices = 2 * (no. of edges)
=>Path : a sequence of vertices v1,v2,...vn where vi and vi+1 has an edge
=>simple path, cyclic path
=>connected graph : every two vertices must have a path
=>Subgraph : a graph having subset of vertices and subset of edges
=>Maximum connected subgraph : a subgraph, in which if you add a vertex , you cannot get a connected subgraph
=>Tree (free tree) : connected subgraph without cycles, different from Tree DS as they have no root node.
=>Forest : collection of trees
=>Complete graph : there is an edge bw every pair of vertices
	How many edges in a complete graph : nC2 = n*(n-1)/2
	How many edges in a complete directed graph : 2 * nC2 = n*(n-1)
=>Minimum no of edges required to make a graph connected = n-1
=>Spanning tree : Tree that contains all vertices
				i.e. Connected subgraph that contains all vertices without cycle

Data structures for graphs :

1) Edge list
unordered list of vertices and edges
simple to implement
inefficient when finding an edge bw two given vertices

2) Traditional Adjacency list :
vertices are kept in an array.
vertices point to a linked list of vertices that they are edged with.
There can be two kinds of adjacency list, IN and OUT. 

3)Modern adjacency list :
its a combination of above 2 approaches
Vertices contain a list of IN and OUT going edges
There is also an unordered list of edges, and the adjacency list of vertex point to edge in edge list.

4)Matrix representation:
V x V matrix for storing weight of the edge OR can be taken as boolean in case weightless graph.
Adding new vertex is costly, as 2D matrix is stored in a linear way in computer memory,
so we need to copy and create a new one.




BFS :

If graph is considered as tree (root node is considered as starting point node), then bfs:
->traverses over each level of tree one by one (nodes at same level)
->nodes at a distance of 1 edge distance are covered first
->BFS can be implemented as Queue
->The result of BFS is a spanning tree started from node S, such that
spanning tree has minimum path length from node S to any other node.

BFS requires that each node must have 3 more properties other that a normal graph vertex:
1)color		: discovered with processed,undiscovered,discovered with unprocessed
2)parent	: backtrack and get path from any node to S
3)distance	: determines minimum distance from source to any node

Algo :

	BFS(src) {
		src.color = GRAY
		src.parent = nil
		src.distance = 0
		Q <= src
		While(Q is not empty) {
			qNode <= Q
			for all tempNode adjacent to qNode {
				if(tempNode.color == WHITE) {
					tempNode.color = GRAY
					tempNode.parent = qNode
					tempNode.distance = qNode.distance+1
					Q <= tempNode
				}
			}
			qNode.color = BLACK
		}
	}

Time complexity for BFS = O(V+E)
for a Connected graph, E >= V-1 , then it is equivalent to O(E)
http://stackoverflow.com/questions/11468621/why-is-the-time-complexity-of-both-dfs-and-bfs-o-v-e

Breadth First Tree

Applications of BFS :
1)Get no of connected components

	Solution 1 :
	Do BFS from each node and mark them with a component number.
	color can be used to check if they are visited or not.
	
	Solution 2 :
	Do DFS on graph
	No need to take extra flag, as DFS already uses visited flag for each node.
	
		GetConnectedComponents() {
			connectedComponents = 0
			nodeList = getAllNodes();
			for all tempNode in nodeList {
				if(!tempNode.visited) {
					connectedComponents++
					DFS(tempNode)
				}
			}
			return connectedComponents;
		}
		
	time complexity = O(V+E)


2)Bipartite graph :

A graph is Bipartite if,
Every edge has one vertex in set U and other vertex in set W, such that 
U union W = Vertices
U intersection W = nil

Go for a BFS, For a connected graph, graph has no edge in same level during BFS.
If a graph has an edge then it has an odd cycle.
If a graph has an odd cycle, then it is not bipartite.
Level of node can be calculated from distance parameter of node.

	
	isBipartiteGraph() {
		nodeList = getAllNodes();
		for all tempNode in nodeList {
			tempNode.distance=0
		}
		for all tempNode in nodeList {
			if(tempNode.distance==0) {
				if( !isBipartite(tempNode) ) {
					return false
				}
			}
		}
		return true
	}

	isBipartite(src) {
		src.color = GRAY
		src.distance = 0
		Q <= src
		While(Q is not empty) {
			qNode <= Q
			for all tempNode adjacent to qNode {
				if(tempNode.distance==qNode.distance) {
					return false
				}
				if(tempNode.color == WHITE) {
					tempNode.color = GRAY
					tempNode.distance = qNode.distance+1
					Q <= tempNode
				}
			}
			qNode.color = BLACK
		}
		return true
	}



=>Diameter of BFS = maximum distance bw two vertices in G
=>Distance bw two vertices = length of shortest path bw two vertices

	get Diameter for one BFS result :
	->Do BFS
	->get max level value in graph, say n
	->now get max level value in graph less than n, say m
	->diameter = n+m

If we want to determine exact diameter of a graph, then we need to perform BFS from every node.
time complexity for this = O(E*V)

Diameter(G) <= 2*(max level no in any BFS)


==>Eulerian path and circuit for undirected graph

Eulerian path (trial) 	: which visits every edge exactly once
Eulerian cycle 			: Eulerian path which starts and ends on the same vertex
semi-Eulerian			: A graph that has an Eulerian path but not an Eulerian cycle

Euler stated without any proof that a necessary condition for the existence of Eulerian circuits
 is that all vertices in the graph have an even degree.

Carl Hierholzer proved that for the existence of Eulerian trails it is necessary that zero or two vertices have an odd degree.

(Q)Given a graph G, has G Eulerian path?
Solution :
	->check if graph is connected
	->if yes then
	->count of vertices with odd degree must be 0 or 2
	->if yes, then graph has eulerian path.
	
(Q)Given a graph G, has G Eulerian cycle?
	->check if graph is connected
	->if yes then
	->count of vertices with odd degree must be 0
	->if yes, then graph has eulerian path.
	
(Q)Given a Eulerian graph G, print Eulerian path.
	->check if graph has eulerian path
	->if yes, then if graph has any odd degree vertex start from there, 
			else start from any vertex
	->when you find more than one edge from a vertex,
			choose that edge which is not a bridge
	->use DFS to check if an edge is a bridge

=>seven bridges of konigsberg problem :
If there is a graph G(V,E) , and a user must travel to all nodes without using any edge more than once.

Solution : This can be possible if each vertex have an even degree.



Hamiltonian path	: that visits each vertex exactly once
Hamiltonian cycle 	: Hamiltonian path which is a cycle

(Q)check if a graph has Hamiltonian path


===========================

Depth First Search(DFS) :

DFS can be done on any path of the graph.
There can be many DFS tree possibilities from a single node.
There can be a possibilities that, DFS tree has a longer path bw two nodes as compared to its shortest path.
We store a timestamp of every node.
Every node has two timestamp stored :
	->start_timestamp = time at which node was monitored first.
	->end_timestamp = time at which no further route was found and backtracked.
Stack or Recursion is used to implement DFS.
Path formed by DFS is called DFS tree.
There are only two types of edges in DFS undirected graphs :
	->tree edges
	->back edges : An edge from a node to its ancestor
A back edge can have a shorter path bw two nodes as compared to tree edges.


DFS Algo :
DFS can be implemented by using recursion or by stack.

We will use three properties for a node in DFS:
boolean visited		v
int arrival_time	a
int departure_time	d

	time=0;
	DFS(node) {
		node.v=true;
		node.a=time++;
		for all w adjacent to node {
			If (!w.v) {
				DFS(w);
			}
		}
		node.d=time++;
	}
	
	time complexity = O(V+E)

property of a DFS in undirected graph :
	tree edge (u ---> v)
		arr[u] < arr[v]
		dep[u] > dep[v]
		
	back edge (u ---> v)
		arr[u] > arr[v]
		dep[u] < dep[v]

=======
Bridge Edge :
http://www.geeksforgeeks.org/bridge-in-a-graph/
http://stackoverflow.com/questions/28917290/how-can-i-find-bridges-in-an-undirected-graph
http://stackoverflow.com/questions/11218746/bridges-in-a-connected-graph


2 Edge Connected :
A graph is 2 edge connected if and only if, you remove an edge from graph and it is still connected.

Bridge edge : an edge which if removed, then the graph is not connected.
We just need to find out if there is any bridge edge in a graph

solution 1 : 
Remove each edge and check if there is any increase in no of connected components,
If it increases by 1, then removed edge is a bridge edge.

solution 2 :
When backtracking from a node v, 
We need to ensure that there is a back edge from some descendent of v to some ancestor of v.
descendent of v also includes v itself.

There can be many back edges from descendent of v to ancestor of v, 
but we should be interested in Deepest back edge.
Deepest Back Edge : 
A back edge whose ancestor arrival time is minimum (i.e. edge goes top of the tree).

**
Every node asks its descendent to tell about the deepest back edge.
deepest back edge means, a back edge that goes deepest to the root.
this helps every parent node node to get its DBE by its child subgraph.

variable used in algo :
dbe = deepest back edge

Algo :

	time=0;
	2EC(node) {
		arr[node]=time++;
		visited[node]=true;
		dbe=arr[node];
		For all w adjacent to node do {
			if(!visited[w]) {
				dbe = min(dbe, 2EC(w));
			} else {
				dbe = min(dbe, arr[w]);
			}
		}
		if(dbe == arr[node]) {
			//graph is not 2 Edge Connected
			Abort;
		}
		return dbe;
	}

Two errors in this algo:
->We must not consider dbe for Tree edge (in case of undirected graph, u --> v and v --> u both are same)
->The node from which DFS will start, will have a dbe = arr of that node.


(Q)Given a graph G, is G a planar graph?

Planar graph : a graph whose vertices and edges are on same plane and no two edge intersect each other.

Complete graph on 5 vertices, is not a planar graph.

Theorem 1 : |V| >= 3 and |E| > 3|V| - 6
			G is not planar
Theorem 2 : G has no circuit of length 3
			|E| > 2|V| - 4
			G is not planar

(Q)2 Vertex connected graph :
If we remove a vertex from a graph, the graph must be connected.

=>K vertex connected
=>K edge connected

===============================

DFS for Directed Graph :

Types of edges :
Forward
Back
Tree
Cross

For cross edge (u,v) :  	arr[u] < dep[u] < arr[v] < dep[v]

For Forward edge (u,v) : 	arr[u] < arr[v]
							dep[u] > dep[v]
								OR
							arr[u] < arr[v] < dep[v] < dep[u]
							
For Back edge (u,v) :		arr[u] > arr[v]
							dep[u] < dep[v]
								OR
							arr[v] < arr[u] < dep[u] < dep[v]
							
For Tree edge (u,v) :		arr[u] < arr[v]
							dep[u] > dep[v]
								OR
							arr[u] < arr[v] < dep[v] < dep[u] (similar to Forward Edge)
							
(Q)If there is no back edge in DFS of a directed graph G,
   does that mean it is acyclic ?
   
No Back Edge === No Cycle

Ans: 
1)Do a DFS
2)Order vertices of graph in departure time

All edges except back edge will be moving from lower value to higher value in dep time.
This ordering is also called as topological sort.  

Statement :
Given an acyclic graph G, ordering of vertices in their departure time is called Topological sort.   
 
Topological sort : sorting vertices on the basis of departure timestamp 
	(this can be done while performing DFS just to avoid complexity of sorting)
	
DAG : Directed Acyclic Graph

=>In undirected Graph : 
Connected Graph = There is a path bw every pair of vertices.

=>In Directed Graph:
Strongly Connected Graph = There is a path bw every ordered pair of vertices.

for a strongly connected graph , no of edges = 2 * nC2 = n(n-1) 

=>Weakly connected Directed graph:
	There is a path between every two vertices either in one or in both directions.
	
(Q)Given a directed Graph G, is G a strongly connected graph?

solution1=>
Do DFS from every vertex and it should cover all the vertices in every DFS.

complexity = O(m*n)

solution2=>

statement1 : From DFS we deduce that there exists a path from vertex V to every other vertex.
statement2 : There exists a path from every other vertex to V.

If both statement1 and statement2 are correct than, graph is strongly connected.

	path from V --> X
	path from V --> Y
	
	path from X --> V
	path from Y --> V
	
	hence
	path from X --> Y
	path from Y --> X

		1. Do DFS on arbitrary vertex V
		2. Do reverse edges in G 
		3. Do DFS from V in reversed G (DFS on reversed G can also be done by doing DFS on InAdjacency edges)
		4. If all vertices are connected in both DFS, then graph is strongly connected

Solution3=>

	Lets try to solve this problem with only one DFS.
	
	For a directed graph, if a subtree has an out edge, either back edge or cross edge,
	then this subtree has some path from which it can go outside.
	
	The necessary and sufficient condition for a subtree to be strongly connected is 
	they must have an edge going out of that subtree.
	(for a subtree if no edge goes out, then edges are only incoming and no outgoing path available)
	
	Arrival time of cross edge or back edge is small at destination vertex.
	
	We need to modify our DFS as in case of 2EC.
	Every DFS program will return minimum arrival time value to which its descendent are reachable.

		time=0;
		SC(node) {
			arr[node]=time++;
			visited[node]=1;
			minArrTime=arr[node];
			for w adjacent to node do {
				if(!visited[w]) {
					minArrTime = min(minArrTime,SC(w));
				} else {
					minArrTime=min(minArrTime,arr[w]);
				}
			}
			if(minArrTime==arr[node]) {
				if(not the root vertex of graph) {
					STOP
					Graph is not strongly connected
				}
			}
		}


Applications of BFS :
1.Connected Components
2.Bipartite graph

Applications of DFS in undirected graph :
1. Two Edge Connected
2. Planar graph
3. Vertex connected
4. Connected Components

Applications of DFS in Directed graph :
1. Strongly Connected graph
2. Acyclic
3. Topological sort

All above applications have linear time complexity.

===============================================


Minimum spanning tree :

tree = Connected subgraph WITHOUT CYCLES
spanning = it should cover all vertices

MST = a spanning tree which has minimum length or weight

Kruskal MST :

1. sort edges on the basis of their length
2. take empty tree T
3. for every edge from the sorted list
	if this edge do not make a cycle in T then add this edge to T
	
(Q)How to check if tree has a cycle while adding an edge ?
Ans : 
make set of all connected components
when you add an edge without creating a cycle, then no of components get reduced by 1.
i.e. Union of edge and set of edges in a component must reduce final set of components by 1.

