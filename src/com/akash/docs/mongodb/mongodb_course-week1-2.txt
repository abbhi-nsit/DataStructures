mongodb course :


-> Stores data as documents in a binary representation called BSON (Binary JSON)
-> Related information is stored together for fast query access
	No joins
-> Schemaless
	there is no need to declare the structure of documents to the system – 
	documents are self-describing
-> Documents give you the ability to represent hierarchical relationships
    to store arrays and other more complex structures easily
-> Quering, aggregation , indexing
-> No transactions as all related data is at single collection
-> Distributted environment : replication and sharding
-> multi-document transactions , version 4.0

Table		->	Collection
Row			->	Document
Column		->	Field
GROUP_BY	->	Aggregation Pipeline


http://stackoverflow.com/questions/3778428/best-way-to-store-date-time-in-mongodb

data type defined by json spec :
String,array,number,object

communication bw mongodb driver and server of is done via BSON.
BSON is binary format of JSON (javascript object notation).
BSON is Lightweight and efficient.

Date is not supported in BSON.
javascript Date and ISODate are supported.


Queries :

help
show dbs
show collections
use databaseName
db.collectionName.insert({"name":"akash", "age":20});
db.collectionName.insertMany([ {...}, {...} ]);
db.collectionName.insertOne({"name":"akash", "age":20});
db.collectionName.insert({});
db.collectionName.find()
db.collectionName.find().pretty()
db.collectionName.findOne()
db.collectionName.find({"name":"akash"})

find() method returns a cursor object.Which means we can iterate on the cursor to traverse each object.
var cursor = db.collectionName.find();
cursor.hasNext()
cursor.next()

(Q) To embed data in a single collection or create a seperate collection

1 Post can have many tags
1 post can have many comments
authors can have separate collection 

-->comments can be saved within post because comments cannot be used independently without post
-->Size of a document limits to 16 MB.

indexing is supported in sub-document and array elements.

========================================================================================

insertOne({})
insertMany([ {},{} ] , { "ordered" : false });
//by default ordered is true

db.collectionName.drop();		//drop collection

mongodb uses _id field in every collection as a primary key.

===========================================================================================

Equality matches documents :

{"name" : "abc" , "stars" : ["abc","xyz"], "params" : { "rating" : 4 , "country" : ["India","Auz"] } }

(1) Scalar search
db.coll.find({ "name" : "abc" })

(2)search for nested/embedded document === Dot notation
db.coll.find({ "params.rating" : 5 })

searching in an array :
(1)exact match with array : elements and their order must have exact match
(2)searching if element exist in array
(3)searching if element exist in array at particular index
(4) Array operator => $all , $size , $elemMatch
	$all : checks if all specified elements present in any document
	$size : checks if array has a size as specified
	$elemMatch : when array contains document and we want to check against multiple fields in that document

db.coll.find({ "params.country" : ["Auz","US"] })		//exact match

db.coll.find({ "params.country" : "India" })		//all documents whose array contains this element

db.coll.find({ "params.country.0" : "India" })		//if element exist in array at particular index

db.coll.find({ "params.country" : { $all : ["India","US"] } }).count();

db.coll.find({ "params.country" : { $size : 6 } }).count();



=>Cursor and projection :

Cursor returned from find are in batch.Batch is returned on the basis of max size of Bson document.
Generally size of batch is 100.

var cur = db.coll.find();
var doc = function() { return cur.hasNext() ? cur.next() : null }
cur.objsLeftInBatch();
doc();

projection is the second document specified in find query

db.coll.find({ "name" : "abd" } , { stars:1, _id:0, params:1 })

=============================================================================================

comparison operators: 
db.coll.find({ "params.rating" : {$gt : 5 , $lt : 10} });

$gt
$gte
$lt
$lte
$ne
$in
$nin


(Q)find distinct data.type entries

>db.BCBS_configuration.findOne();
{
        "_id" : ObjectId("55afafe1c4d02b1df44f27dc"),
        "data" : {
                "type" : "UI",
                "value" : {
                        "permissions" : [
                                "AddPI"
                        ],
                        "attr" : "smart"
                },
                "role" : "individual",
                "id" : 1,
                "key" : "config",
                "attr" : "smart"
        },
        "key" : "config"
}


db.BCBS_configuration.find().count();
282

db.BCBS_configuration.distinct("data.type");
[ "UI", "type1", "SYSTEM" ]

================================================================
=>Database and Collection

use myNewDB
db.myNewCollection1.insertOne( { x: 1 } )

	new database and new collection is created on the fly.
	
db.createCollection("students");
	is used create a collection explicitly.


->Document validation can be done on collection level.

db.createCollection("students", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: [ "name", "year", "major", "gpa" ],
         properties: {
            name: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            gender: {
               bsonType: "string",
               description: "must be a string and is not required"
            },
            year: {
               bsonType: "int",
               minimum: 2017,
               maximum: 3017,
               exclusiveMaximum: false,
               description: "must be an integer in [ 2017, 3017 ] and is required"
            },
            major: {
               enum: [ "Math", "English", "Computer Science", "History", null ],
               description: "can only be one of the enum values and is required"
            },
            gpa: {
               bsonType: [ "double" ],
               minimum: 0,
               description: "must be a double and is required"
            }
         }
      }
   }
})


-> View can be created to perform any kind of read only operation
	they are linked to indexes of collection but they have some restricted query operations.
	
	
-> Capped Collection are fixed size collection
	they do not require indexing
	so it has high insertion throughput
	you cannot shard a capped collection
	
===============================================================
ObjectId

->a 4-byte value representing the seconds since the Unix epoch,
->a 5-byte random value, and
->a 3-byte counter, starting with a random value.


BSON strings are UTF-8


=============================================================================================

Element operators :

$exists			-->  if field exists
$type			-->  checks for type of a field

db.BCBS_configuration.find({"data.type":{$exists:false} }).count();
62

db.BCBS_configuration.find({"data.type":{$type:"string"}}).count();
220

===========================================================================================

logical operators :

$or
$and
$nor
$not

-> db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )
corresponding sql
-> SELECT * FROM inventory WHERE status = "A" OR qty < 30


-> db.inventory.find( {
     	status: "A",
     	$or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
	} );
corresponding sql
-> SELECT * FROM inventory WHERE status = "A" AND ( qty < 30 OR item LIKE "p%");


Q)find all entries which have no data.type

db.BCBS_configuration.find({ $and : [{"data.type" : {$ne:"UI"}},{"data.type" : {$ne:"SYSTEM"}},{"data.type":{$ne:"type1"}}] }).count();
62

db.BCBS_configuration.find({"data.type":null}).count();
16

=============================================================================================

Array operators : 
$all
$size
$elemMatch

=============================================================================================

Update documents :

updateOne(filter, update, options) -- updates first document that matches the filter
updateMany(filter, update, options) -- updates all documents that matches the filter
replaceOne(filter, update, options)

options for update 
	->upsert		-- if no document found then it insert new document
	->writeConcern
	->collation
	->arrayFilters

db.coll.updateOne({"name":"abc"} , { $set : {"feature" : "xyz"} });

db.BCBS_configuration.updateOne( {"data.type":"UI"}, {$set : {"data.value":{"permissions": ["AddPI"] }}} );

db.BCBS_configuration.updateOne( {"data.type":"UI"}, {$set : {"data.value.attr":"smart"}} );

update operators for fields:

$set
$inc
$mul
$reset
$min
$max
$rename
$currentDate 

==========================================================

update operators for array:
-> update first element
-> update all elements
-> $addToSet  -- add element to array if not exist
-> $pop       -- removes first or last element from array
-> $push	  -- adds values to the array
				$each
				$slice
				$sort
				$position
				
-> $pullAll   -- removes all matching values

==========================================================
delete documents 

deleteOne()
deleteMany()

==========================================================

-> db.people.find( { status: "A" } ).sort( { user_id: 1 } )
corresponding sql
-> SELECT * FROM people WHERE status = "A" ORDER BY user_id ASC


-> db.people.find().count()
corresponding sql
-> SELECT COUNT(*) FROM people


-> db.people.find( { user_id: { $exists: true } } ).count()
corresponding sql
-> SELECT COUNT(user_id) FROM people

find first 5 people
-> db.people.find().limit(5)


=========================================================
mongorestore dump

mongoimport -d students -c grades < grades.json -batchSize 1

db.grades.aggregate({'$group':{'_id':'$student_id', 'average':{$avg:'$score'}}}, {'$sort':{'average':-1}}, {'$limit':1})

db.grades.find( {}, {} ).sort( { 'student_id' : 1, 'score' : 1, } ).limit( 5 )

db.grades.aggregate([ {$sort:{student_id:1, score:1}} ]);
