
Spring Web Services 2.2.2

(1)first we create xsd files.
xsd->stub	(JAXB) Java Architecture for XML Binding
xsd->wsdl	(spring ws dynamic-wsdl) 

element -> complexType -> sequence

(2)create wsdl from xsd file

dynamic-wsdl	--  DefaultWsdl11Definition
It helps us to create wsdl from xsd and publish this wsdl with an endpoint url.
xsd=xsd file path
locationUri=url to access wsdl relative to context path


static-wsdl		--  SimpleWsdl11Definition
static-wsdl helps to publish a wsdl file.It requires a wsdl file.


MessageDispatcherServlet scans all beans of Wsdl11Definition in classpath and publish them.

(3)Now we have to create an endpoint for this wsdl

==>Below functionality can be implemented by Spring-ws.
org.springframework.ws.server.endpoint.annotation package

@Endpoint
class Abc {

	@Payload(namespace="endpoint_url" request="request_object")
	
	public @ResponsePayload ResponseObject myf1(@RequestPayload RequestObject req) {
		
	}
}

==>We can also implement this via apache camel.

->Create an endpoint url using namespace and request object
->Create bean processor that will receive request object as Exchange object
->Create a Route for combining endpoint with processor.

(4)Parts of WSDL file :
definitions	: defines all namespace url
types		: all type declarations are done here
message		: all request response message
portType	: one wsdl has one portType, it include all operations
Binding		: transport level protocol
service		: portType -- binding

 
(5)At client side

WSDL  -->  Stub classes

->jaxws-maven-plugin
->wsimport tool of java


(6)SOAPHandler can be created at both server and client side.
incoming and outgoing request can be intercepted.
eg: ->adding user credentials at client side
	->validating user credentials at server side
	->printing soap envelope

class MyHandlerClass implements SOAPHandler<SOAPMessageContext> {

	public void close(MessageContext mCtx) {
	}

	public Set<QName> getHeaders() {
		return null;
	}

	public boolean handleFault(SOAPMessageContext mCtx) {
		return true;	// continue down the handler chain
	}

	public boolean handleMessage(SOAPMessageContext mCtx) {
		Boolean outbound = (Boolean) mCtx
				.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
				
		return true; // continue down the handler chain
	}
}


================================================================================



Soap Web Services:

Simple Object Access protocol

Web services are different from RMI that it makes language neutrality.

A good web Service should have following features:
(1)Loosely coupled				--	one call must be independent to other and do not know the internal working
(2)All calls must be stateless	--	no instance variable,only static or final variable

**JAXB component:
Java Architecture for XML Binding

marshalling unmarshalling

marshall 	=>	memory object (java object) --> document(xml)
unmarshall 	=> 	document (xml) --> memory object (java object)


**There are some java tools which can also perform this operation:
schemagen	=>  java annotated class  -->  XML schema
xjc			=>  XML schema -->	Java annotated class
wsimport	=>	WSDL --> Stub classes 	(at client side)


Features of SOAP :
(1)Transport Neutral
(2)Only works with XML
(3)Every SOAP Request and SOAP Response object is a JAXB artifact.
(4)Every Soap web Service has an Endpoint which needs to be published.
	Endpoints are published with a specified url-pattern
	http://java.sun.com/xml/ns/jax-ws/ri/runtime helps to publish an endpoint.
	It requires an endpoint name, url pattern, implementation class,handlers (if required).
(5)Handlers : before going for actual operation in Service, handlers are created to process incoming and outgoing data.
			Handlers are provided both at client and Server side.
			advantages : validate data,modify data, print data
			implement SOAPHandler interface
(6)Every namespace file is identified by its targetNamespace
(7)Soap message contains one Envelope. Envelope consists of 
	header,body,fault,attachment
(8)Code first and Contract first are two ways to create SOAP web services.
	Code first 		: Java code is written first and then wsdl is generated.
	Contract first 	: WSDL is written first and then java code is generated.
(9)get schema for Service 	= endpointUrl?xsd=1
	get wsdl for Service 	= endpointUrl?wsdl
(10)WSDL consists of:
	Definition	:main tag of wsdl file.all tags are child of this.used to import any xsd.
	types		:
	message		:complex types like request and response types
	portType	:one wsdl has one portType.portType contains all operations(req-res pair)
	binding		:provides implementation details eg: transport layer protocol http,smtp
	service		:combination of portType + binding
	

While registering JAX-ws in java for SOAP:
-->WSServletContextListener regiter it in web.xml
		Parses sun-jaxws.xml and sets up HttpAdapters for all deployed endpoints.
-->WSServlet
		JAX-WS dispatcher servlet.

