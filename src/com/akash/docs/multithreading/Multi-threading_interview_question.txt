Multi-threading interview question

1) Thread, Runnable, run, start, ThreadGroup
2) what are the ways to create a thread and which is better: Thread,Runnable,Executor framework
3) why wait, notify and notifyAll are in object class? why they called inside synchronized ?
4) diff bw sleep and wait
5) join()
6) ThreadLocal : set(), get(), initialValue()
7) ThreadGroup
8) diff bw syncronized method and block
9) daemon thread
10)-- Java Timer classes vs ScheduledThreadPoolExecutor
11) How to count no of request to a servlet -- AtomicLong
12) Why atomic class are better than Lock api - 
	CAS -> compare and swap , it opportunisticly updates the variable
	These operations are implemented atomically at processor level
	client api has to deal with contention
	AtomicLong, AtomicInteger, AtomicBoolean, AtomicReference
13) volatile keyword
14) Why suspend(), resume() and stop() methods are deprecated
15) how to stop a thread, how to stop a thread with blocking Api
16) Strong References, WeakReference, SoftReference
17) escaping this object during construction -- start a thread in constructor, event listener in constructor

18) what is ThreadPool ? How to create our own ThreadPool
19) diff bw Lock api and syncronized keyword -> 
		try methods, interruptible, fair-unfair, 
		separate Condition object for different diff condition queues.
20) Executor framework
21) Runnable, Future (get,isDone,cancel), Callable(call) , RunnableFuture, FutureTask (RunnableFuture)
22)-- ways to avoid deadlock
23) How to make threads as deamon, which are created using executor service
24) How to handle exceptions in threads(like retry if exception occurs etc), while using executors 
25) CountDownLatch, CyclicBarrier, Semaphore
	-> Difference b/w CountDownLatch and CyclicBarrier
		-> CountDownLatch can not be reset, however, CyclicBarrier can (cyclic because it can be re-used)
			CyclicBarrier can be used when thread gates are at multiple states, like map-reduce
		-> we can trigger a runnable object at the end of last thread execution
		-> (all-or-none breakage model) A barrier exception in any thread can result in faluire of all threads
26) How ThreadPoolExecutor works? How FutureTask works ?
	What are various types of pool executors in java, 
	i.e. various implementations of ExecutorService interface in java
	How state of pool is managed and how state of threads inside pool is managed ?
	Advantages of executor framework ?
27) create your own ThreadPoolExecutor ?
28)-- ReadWriteLock
29) diff bw volatile and atomic 
	-> volatile provides visibility guaranty, but not atomicity
	
30)-- fork-join framework in java
31)-- ConcurrentHashMap, CopyOnWriteArrayList and CopyOnWriteArraySet, ConcurrentSkipListMap
32) CompletableFuture

----------------------------------------------


ReentrantLock advantage over synchronized block
->try
->interruptibly  -- wait unconditionaly until interrupted
->condition queues

Semaphore 		//similar to monitor with more than one permits
	acquire()
	release()
	
CountDownLatch	//like a gate
	await()
	countDown()

CyclicBarrier
	await()
	
CyclicBarrier is similar to CountDownLatch in functionality.
but there are few difference:
-> CountDownLatch can not be reset, however, CyclicBarrier can (cyclic because it can be re-used)
	CyclicBarrier can be used when thread gates are at multiple states, like map-reduce
-> we can trigger a runnable object at the end of last thread execution
-> (all-or-none breakage model) A barrier exception in any thread can result in faluire of all threads
	

When all threads finish performing their action, one of them (typically the last one that trips the barrier)
 starts processing the data that was fetched by each of these.
eg: MapReduce


BlockingQueue  ---  interface that offers various methods of threadsafe Queue
	various operations : 
	->block
	->throw exception
	->return a special value

ArrayBlockingQueue
LinkedBlockingQueue

DelayQueue --- elements are inserted in queue with a specified delay and released from queue order by their delay.

Exchanger  --- exchange data between two threads
