Runnable - run()
Callable - call()

1. call() can return a value but run() cannot
2. call() can throw exception but run() cannot

ExecutorService es = Executors.newFixedThreadPool(...);

		public static ExecutorService newFixedThreadPool(int nThreads) {
			return new ThreadPoolExecutor(nThreads, nThreads,
										  0L, TimeUnit.MILLISECONDS,
										  new LinkedBlockingQueue<Runnable>());
		}

Executor.java (I) 			--> execute()
	|
ExecutorService.java (I) 	--> submit(Callable) , submit(Runnable) , invokeAll(Collection<Callable>)
	|
ThreadPoolExecutor.java (C)

		Future<T> submit(Callable<T> task) {
			RunnableFuture<T> ftask = newTaskFor(task);
			execute(ftask);
			return ftask
		}
		
		->create new RunnableFuture
		->execute RunnableFuture
		->assign a thread from worker pool



Future		(I)			--> get() , cancel() , isDone() , isCancel()
	|
RunnableFuture	(I)		--> run()	//Runnable version of Future
	|
FutureTask		(C)



	get() --> check if current thread is NEW or RUNNING
				if yes then wait
				if no then
					if success return result
					else if interrupted return InterruptedException
					else return the actual exception occurred
					
	
---------------	
		
**Example :
					
Class MyCallable implements Callable<String> {
	public String call() {
		return "hello";
	}
}		
ExecutorService es = Executors.newFixedThreadPool(10);
Future<String> fut = es.submit(new MyCallable());
String result = fut.get();


================================================================

http://crunchify.com/hashmap-vs-concurrenthashmap-vs-synchronizedmap-how-a-hashmap-can-be-synchronized-in-java/