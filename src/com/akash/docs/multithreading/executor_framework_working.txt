**Example :
					
Class MyCallable implements Callable<String> {
	public String call() {
		return "hello";
	}
}

ExecutorService es = Executors.newFixedThreadPool(10);
Future<String> fut = es.submit(new MyCallable());
String result = fut.get();

======================================================
Advantages :

-> Asynchronous task execution
-> Decoupling task submission from task execution
-> Scalable configuration

======================================================

ExecutorService es = Executors.newFixedThreadPool(...);

		public static ExecutorService newFixedThreadPool(int nThreads) {
			return new ThreadPoolExecutor(nThreads, nThreads,
										  0L, TimeUnit.MILLISECONDS,
										  new LinkedBlockingQueue<Runnable>());
		}

Executor.java (I) 			--> execute()
	|
ExecutorService.java (I) 	--> submit(Callable) , submit(Runnable) , invokeAll(Collection<Callable>)
	|
ThreadPoolExecutor.java (C)

		Future<T> submit(Callable<T> task) {
			RunnableFuture<T> ftask = newTaskFor(task);
			execute(ftask);
			return ftask
		}
		
		->create new RunnableFuture
		->execute RunnableFuture
		->assign a thread from worker pool



Future		(I)			--> get() , cancel() , isDone() , isCancel()
	|
	|	  Runnable (I)
	|		|
	|		|
  RunnableFuture	(I)		--> run()	//Runnable version of Future
	|
	|
FutureTask		(C)



	get() --> check if current thread is NEW or RUNNING
				if yes then wait
				if no then
					if success return result
					else if interrupted return InterruptedException
					else return the actual exception occurred
					

================================================================
run() method of FutureTask only takes Callable implementation.
If you want to use Runnable, cast Runnable to Callable using RunnableAdapter.

when executorService.submit() is called
new Worker is created and added to queue,
here worker is new thread created by threadPoolExecutor
worker.start() initiated

internally ,worker.start() directly calls callable.run() of FutureTask

output of futureTask is stored in FutureTask object itself.

Difference b/w run() and call()
-> call() can return a value but run() cannot
-> call() can throw exception but run() cannot

================================================================

http://crunchify.com/hashmap-vs-concurrenthashmap-vs-synchronizedmap-how-a-hashmap-can-be-synchronized-in-java/


ReentrantLock
	lock()
	lockInterruptibly()
	tryLock()
	timed tryLock()

	newCondition()

	Condition
		await
		signal
		signalAll
	

Semaphore
	acquire
	release
	
	acquireInterruptibly()
	tryAcquire
	timed tryAcquire
	

CountDownLatch
	await()
	countDown()
	

CyclicBarrier
	await()
	Runnable barrierAction
