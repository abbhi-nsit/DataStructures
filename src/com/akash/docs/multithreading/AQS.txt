AbstractQueuedSynchronizer

ReentrantLock
Semaphore
CountdownLatch
ReentrantReadWriteLock
FutureTask
SynchronousQueue


Exclusive Acquisition :
tryAcquire()
tryRelease()
isHeldExclusively()


shared Acquisition :
tryAcquireShared()
tryReleaseShared()

http://www.javaworld.com/article/2077413/learn-java/semaphore.html

==================================

What are state dependent classes and how to create them?

classes that helps threads to work or wait based on state of an object are state dependent classes.
In java , multi threaded state dependent operations are done by : object intrinsic lock ,explicit condition queues
 and AbstractQueuedSynchronizer

Initially java only followed simple concept of monitors and wait sets on objects.All other features
 like semaphore and latches are implemented over it.
In java 1.5, it extended the feature of object wait sets and improved it to Condition objects.
Before that condition predicates were used by programmers to implemented state based classes.
These condition predicates were very fragile to maintain as their could be many code paths and
 many state based conditions to implement.


Polling and seeking approach for making state based class :


acquire lock on object state
while (precondition does not hold) {
	release lock
	wait until precondition might hold
	optionally fail if interrupted or timeout expires
	reacquire lock
}
perform action
release lock



=>example of take() method of a BoundedBuffer

public V take() {
	while (true) {
		try {
			synchronized(this) {
				if (isEmpty())
					throw new BufferEmptyException();
				return doTake();
			}
		} catch (BufferEmptyException e) {
			Thread.sleep(SLEEP_GRANULARITY);
		}
	}
}

problems :
-sleep time can be more or less,hence extra time wasted in sleep
-cpu utilization


Handling condition predicates at code level using wait-notify improved previous approach,
but it was difficult to maintain if number of condition predicates becomes high.

public synchronized V take() throws InterruptedException {
	while (isEmpty())
		wait();
	V v = doTake();
	notifyAll();
	return v;
}

There are two kind of threads requirement that can be considered in multi-threading :
-uniform waiter requirement : threads must be waiting uniformly based on their condition predicates.
-one in one out requirement : after exiting one thread another single thread must be getting a chance to execute.

It is also difficult to maintain uniform waiters requirement using wait-notifyAll methods as 
all threads will be notified even if their conditions are not true.
This also makes more CPU utilization and context switching 
as threads having unwanted condition queues are woken up by notifyAll().
Also this code is fragile to maintain.Adding any other condition queue will change lot of code paths.


=>Condition objects to the rescue :

Lock class generalized intrinsic lock
Condition class generalized condition queues

So one Lock object can have multiple Condition objects.
Each Condition object can have a queue of threads waiting for that condition predicate to be true.
Basically , condition object is nothing but an intrinsic lock in java , 
but they maintain a fair or non-fair queue of waiting thread on these objects.
Condition must be guarded by the same lock from which it was created.
Also, Condition objects must be used inside lock() method of Lock.

problems while creating state based synchronizer classes :
-lack of documentation
-handling inheritance issues
-performance and cpu utilization factors


==>AbstractQueuedSynchronizer to the rescue :

basic operations and features of AQS :

-It must have acquire and release features
-manages state as integer field to determine state. methods are getState() setState() compareAndSetState()
-they can also manage other state variables, like ReentrantLock manages current thread as a variable
-Lock can be acquired either in shared or exclusive mode


boolean acquire() throws InterruptedException {
	while (state does not permit acquire) {
		if (blocking acquisition requested) {
			enqueue current thread if not already queued
			block current thread
		}
		else
			return failure
	}
	possibly update synchronization state
	dequeue thread if it was queued
	return success
}

void release() {
	update synchronization state
	if (new state may permit a blocked thread to acquire)
		unblock one or more queued threads
}


Examples of state dependent classes in java :
->ReentrantLock
->Semaphore
->CountdownLatch
->ReentrantReadWriteLock
->ThreadPoolExecutor

FutureTask
SynchronousQueue

Methods of AQS class in java can be used in two ways : Shared or Exclusive mode acquisition.

For Exclusive Acquisition , child class must implement following methods:
tryAcquire()
tryRelease()
isHeldExclusively()


For Shared Acquisition , child class must implement following methods:
tryAcquireShared()
tryReleaseShared()


None of the synchronizers in java.util.concurrent extends AQS directly.They all delegate to private inner subclasses of AQS instead.


tryAcquire() method for nonfair ReentrantLock : 

protected boolean tryAcquire(int ignored) {
	final Thread current = Thread.currentThread();
	int c = getState();
	if (c == 0) {
		if (compareAndSetState(0, 1)) {
			owner = current;
			return true;
		}
	} else if (current == owner) {
		setState(c+1);
		return true;
	}
	return false;
}


==========================

How ReentrantLock works in java

***http://stackoverflow.com/questions/39183578/how-lock-method-works-in-reentrantlock-java
**http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/

http://stackoverflow.com/questions/2664172/java-concurrency-cas-vs-locking

http://stackoverflow.com/questions/34944212/unsafe-compareandswapint-vs-synchronize

http://stackoverflow.com/questions/26534489/unsafe-park-vs-object-wait

https://dzone.com/articles/interruptedexception-and


========================================

Difference b/w fair and non-fair sync is that :
In non-fair sync , if a newly thread comes and asks for a resource and resource is available,
 then resource is provided to that thread, irrespective of the fact 
 that any other thread has been waiting for this resource for long time.

(Q)How lock() method works in reentrantlock java?
http://stackoverflow.com/questions/39183578/how-lock-method-works-in-reentrantlock-java

LockSupport.park() and LockSupport.unpark() are used

class LockSupport {

	UNSAFE = sun.misc.Unsafe.getUnsafe();
	Class<?> tk = Thread.class;
	parkBlockerOffset = UNSAFE.objectFieldOffset(tk.getDeclaredField("parkBlocker"));

	//here arg is object of ReentrantLock
	private static void setBlocker(Thread t, Object arg) {
		// Even though volatile, hotspot doesn't need a write barrier here.
		UNSAFE.putObject(t, parkBlockerOffset, arg);
	}

	public static void unpark(Thread thread) {
		if (thread != null)
			UNSAFE.unpark(thread);
	}

	public static void park(Object blocker) {
		Thread t = Thread.currentThread();
		setBlocker(t, blocker);
		UNSAFE.park(false, 0L);
		setBlocker(t, null);
	}

}


https://dzone.com/articles/interruptedexception-and

ReentrantLock methods :

1.lock()
	acquire(1) ---> acquireQueued() in exclusive mode ---> LockSupport.park(),
	sleeps current thread until :
		LockSupport.unpark() is called by other thread
		interrupt() is called by other thread
		
2.lockInterruptibly() throws InterruptedException

	It calls doAcquireInterruptibly() which is same as acquireQueued()
	The difference is, when an interrupt occurs, it throws InterruptedException.
	
3.tryLock()
	It calls tryAcquire() with nonFair version
	If you want tryLock() with Fair version, call tryLock(timeout)
	
4.tryLock(long timeout, TimeUnit unit) throws InterruptedException

	tryAcquireNanos(timeout) --->  doAcquireNanos(timeout)  --->   LockSupport.parkNanos(this, nanosTimeout)
	Thread will sleep until :
		timeout expires
		an interrupt occurs in InterruptedException
		
5.unlock()
	release(1)  --->  unparkSuccessor()  --->  LockSupport.unpark()
	
6.newCondition()
	new ConditionObject()




AQS methods :

1.final boolean acquireQueued(final Node node, int arg)
2.private void doAcquireInterruptibly(int arg) throws InterruptedException
3.private boolean doAcquireNanos(int arg, long nanosTimeout) throws InterruptedException
	Above three methods almost do the same logic.
	They check two conditions in an infinite loop
		-->If it can be allowed to execute tryAcquire() , then execute the thread
		-->If its waitStatus is not SIGNAL, then make it SIGNAL and park the thread.


4.private void doAcquireShared(int arg)
5.private void doAcquireSharedInterruptibly(int arg) throws InterruptedException
6.private boolean doAcquireSharedNanos(int arg, long nanosTimeout) throws InterruptedException




ConditionObject methods :

1.await()
2.public final boolean await(long time, TimeUnit unit) throws InterruptedException
3.awaitUninterruptibly()
4.public final long awaitNanos(long nanosTimeout) throws InterruptedException
5.public final boolean awaitUntil(Date deadline) throws InterruptedException

6.signal()
7.signalAll()

-->await() methods in ConditionObject, increases the state and park the thread.
-->signal() methods decreases the state and unpark the firstWaiter.


===============================

Lock lock = new ReentrantLock();
Condition condition1=lock.newCondition();

void foo() {

	lock.lock();
	try {
		while(..) {
			condition1.await();
		}
		...
		...
		condition1.signal();
	}
	finally {
		lock.unlock();
	}
}


============================================================
Data structure for AQS :


class AQS  {

	private transient volatile Node head;
	private transient volatile Node tail;
	private volatile int state;
	
	static final class Node {
		static final Node SHARED = new Node();
		static final Node EXCLUSIVE = null;
		static final int CANCELLED =  1;
		
		//Non-negative values mean that a node doesn't need to signal
		static final int SIGNAL    = -1;
		static final int PROPAGATE = -3;
		
		//Only used for Condition queues
		static final int CONDITION = -2;
		
		volatile int waitStatus;
		volatile Node prev;
		volatile Node next;
		volatile Thread thread;

		//condition queues are accessed only when holding in exclusive mode
		//In case of exclusive mode, threads for condition queue is saved
		//In case of shared mode, empty Node object is saved.
		Node nextWaiter;
	}

	public class ConditionObject {

		private transient Node firstWaiter;
		private transient Node lastWaiter;
		//nextWaiter is used to hold next node of condition queue.
	}
}



=============================================================



AQS :
semaphore
latch
ReentrantLock
ReentrantReadWriteLock

FutureTask  ----  ???



(Q)How LockSupport works with UNSAFE api ?
(Q)Understand all api methods of ReentrantLock

(Q)How Condition works internally?
(Q)How Condition and Lock works with each other?

(Q)How ThreadPoolExecutor works?
(Q)How FutureTask works?
(Q)Functional interfaces and stream API ?

Collection

=======================

interview questions :

-how lock api is better then synchronized
-how cas is better than monitor locking
-create your own ThreadPoolExecutor
-what is semaphore 
-what is latch


==================================


http://stackoverflow.com/questions/11428151/why-is-the-class-called-runnablefuturet-instead-of-callablefuturet
http://stackoverflow.com/questions/39309451/workercountof-method-in-threadpoolexecutor-java

***http://stackoverflow.com/questions/28810474/use-futuretask-for-concurrency

ExecutorService :

AbstractExecutorService
ThreadPoolExecutor
ForkJoinPool
FinalizableDelegatedExecutorService
ScheduledThreadPoolExecutor
DelegatedExecutorService
DelegatedScheduledExecutorService


ThreadFactory :

DefaultThreadFactory
PrivilegedThreadFactory



**Worker class in ThreadPoolExecutor is child class of AQS and Runnable

A new thread of Worker object is created for every task, which directly calls thread.run() method internally.

addWorker() method adds new worker and creates new thread and start it.

starting of worker thread is done inside a lock named , mainLock
running thread.run() method inside runWorker() is also performed inside worker.lock()

===============

(Q)Why ThreadPoolExecutor.Worker class implemented AQS ?

Ans : Whenever you need state dependent operations on the object of your class, you need to implement AQS.

===========================

(1)ExecutorService executor = Executors.newFixedThreadPool(10);

(2)Future<String> future = executor.submit(callable);

		new FutureTask<T>(callable);
			this.callable = callable;
			this.state = NEW;
		execute(ftask);			//has 3 steps of checking
			--->addWorker(ftask, true);
					--->Worker w = new Worker(ftask)
						--->Worker(Runnable firstTask) {
								setState(-1); // inhibit interrupts until runWorker
								this.firstTask = firstTask;
								this.thread = getThreadFactory().newThread(this);		//new thread is created
							}
					--->workers.add(w);
					--->w.thread.start();		//inside this.mainLock.lock() and this.mainLock.unlock()
						--->public void run() {
								runWorker(this);
							}
							
							runWorker(Worker w) {
								w.unlock(); // allow interrupts
								...
								w.lock();
									w.firstTask.run();
										--->FutureTask.run();
												V result = callable.call();
												state=COMPLETING;
												outcome = result;
								w.unlock();
								...
							}
					

(3)String output = future.get();


================================

public class ThreadPoolExecutor extends AbstractExecutorService {

	// http://stackoverflow.com/questions/39309451/workercountof-method-in-threadpoolexecutor-java
	//ctl variable holds data for two conditions : 
	//workerCount = no of worker threads running , lower order 29 bits represents this count
	//run_state = running state of executor , higher order 3 bits represents this state
	
	private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
	private static final int COUNT_BITS = Integer.SIZE - 3;			//29
	private static final int CAPACITY   = (1 << COUNT_BITS) - 1;	//536870911		00011111111111111111111111111111

	// RUN_STATE is stored in the high-order bits
	private static final int RUNNING    = -1 << COUNT_BITS;			//-536870912	11100000000000000000000000000000
	private static final int SHUTDOWN   =  0 << COUNT_BITS;			//0				00000000000000000000000000000000
	private static final int STOP       =  1 << COUNT_BITS;			//536870912		00100000000000000000000000000000
	private static final int TIDYING    =  2 << COUNT_BITS;			//1073741824	01000000000000000000000000000000
	private static final int TERMINATED =  3 << COUNT_BITS;			//1610612736	01100000000000000000000000000000

	private static int runStateOf(int c)     { return c & ~CAPACITY; }	// RUN_STATE & ~CAPACITY = RUN_STATE
	private static int workerCountOf(int c)  { return c & CAPACITY; }	// RUN_STATE & CAPACITY = 0
	private static int ctlOf(int rs, int wc) { return rs | wc; }
	
	
	
	//Each task execution is implemented via this class
	private final class Worker
        extends AbstractQueuedSynchronizer
        implements Runnable
    {
		//A new thread is created for every task, t.start() is called from addWorker() method for each task.
        final Thread thread;
		
        //Actual runnable task which is directly called as firstTask.run() from runWorker()
        Runnable firstTask;
		
        //
        volatile long completedTasks;
	}
	
	//threads that are waiting in queue to get a chance to execute
    private final BlockingQueue<Runnable> workQueue;

	//operations on worker thread is done inside this lock
    private final ReentrantLock mainLock = new ReentrantLock();

	//It maintains set of workers running
    private final HashSet<Worker> workers = new HashSet<Worker>();

    private final Condition termination = mainLock.newCondition();

	//largest pool size reached till now
    private int largestPoolSize;

    private long completedTaskCount;
    
    private volatile ThreadFactory threadFactory;

    private volatile RejectedExecutionHandler handler;

    private volatile long keepAliveTime;

    private volatile boolean allowCoreThreadTimeOut;

    private volatile int corePoolSize;

    private volatile int maximumPoolSize;

}

=================================

public class FutureTask<V> implements RunnableFuture<V> {

	private volatile int state;
    private static final int NEW          = 0;
    private static final int COMPLETING   = 1;
    private static final int NORMAL       = 2;
    private static final int EXCEPTIONAL  = 3;
    private static final int CANCELLED    = 4;
    private static final int INTERRUPTING = 5;
    private static final int INTERRUPTED  = 6;


    //In case of Runnable, RunnableAdapter is used
    private Callable<V> callable;
	
    //result for Callable
    private Object outcome; 
	
    //
    private volatile Thread runner;
	
    //Treiber stack : scalable lock-free stack utilizing the fine-grained concurrency primitive Compare-and-swap
    private volatile WaitNode waiters;

    //for UNSAFE use
	private static final long stateOffset;
    private static final long runnerOffset;
    private static final long waitersOffset;


	//The main thread that calls future.get() method, will be tracked in WaitNode.
	//There could be multiple waitNodes depending upon if , multiple threads are trying to fetch output of same future object.
	//list of waitNodes are stored as stack or Treiber stack
	static final class WaitNode {
        volatile Thread thread;
        volatile WaitNode next;
        WaitNode() { thread = Thread.currentThread(); }
    }
}


===============================

Rules of ThreadPoolExecutor :

(1)When a new task is submitted in method execute(Runnable), and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. 
(2)If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full.
(3)even core threads are initially created and started only when new tasks arrive, but this can be overridden dynamically using method prestartCoreThread or prestartAllCoreThreads

(4) a Executors.defaultThreadFactory is used, that creates threads to all be in the same ThreadGroup and with the same NORM_PRIORITY priority and non-daemon status. 

(5)If the pool currently has more than corePoolSize threads, excess threads will be terminated if they have been idle for more than the keepAliveTime (see getKeepAliveTime(TimeUnit)). 

(6) The use of this queue interacts with pool sizing: 
If fewer than corePoolSize threads are running, the Executor always prefers adding a new thread rather than queuing. 
If corePoolSize or more threads are running, the Executor always prefers queuing a request rather than adding a new thread. 
If a request cannot be queued, a new thread is created unless this would exceed maximumPoolSize, in which case, the task will be rejected. 

