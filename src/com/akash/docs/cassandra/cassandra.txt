opid count(opid) 	-> mid qid 		GRP opid	(checkAndUpdateMerchantFinalisedQuestion() )

1			-> mid uid qid 				(createUserViewedQuestion() )

qid			-> mid uid				(userViewedQuestions )

qid opid		-> mid uid (opid!=null)			(userAnsweredQuestions )

qid opid count(opid)	-> mid 			GRP qid,opid	(merchant finalised)


==========================


viewed					(2,3)
-> ((mid uid) qid created_at)			


answered				(4)
-> ((mid uid) qid opid created_at)	

// single and multi select answers
// same mid,uid,qid,oid more than once

merchant finalised			(1,5)
-> ((mid) qid opid) count	// valid
-> (mid qid opid) count		// valid
-> ((mid qid) oid) count	// Invalid


==========================

create table user_viewed (mid text, uid int, qid int, created_at timestamp , PRIMARY KEY((mid,uid),qid,created_at) );

insert into user_viewed (mid,uid,qid,created_at) values('1',2,1,toTimestamp(now()) );

//check count of 2 for invalid
select qid,count(*) from user_viewed where mid='1' and uid=1 group by qid;

//check if exists before answer save
select * from user_viewed where mid='1' and uid=1 and qid=1 ;

----------------

-> create table merchant_finalised (mid text, qid int, oid int, count counter , PRIMARY KEY((mid),qid,oid) );

update merchant_finalised SET count = count +1 WHERE mid='2' and qid=1 and oid=2;

select * FROM merchant_finalised WHERE mid='2' and qid=2 ;

select * FROM merchant_finalised WHERE mid='2' ;


-------------------

CREATE TABLE user_answers (mid text, uid int, qid int, oid int ,created_at timestamp, PRIMARY KEY((mid,uid),qid,oid,created_at));

insert into user_answers (mid,uid,qid,oid,created_at) values('1',1,1,1, toUnixTimestamp(now()));
insert into user_answers (mid,uid,qid,oid,created_at) values('1',1,1,1, toUnixTimestamp(now()));
insert into user_answers (mid,uid,qid,oid,created_at) values('1',1,1,2, toUnixTimestamp(now()));

select * from user_answers where mid='1' and uid=1;

==========================

=> Spring Repo
https://www.codingame.com/playgrounds/13642/getting-started-with-spring-data-cassandra
https://github.com/lankydan/spring-data-cassandra/tree/master/src/main

=> Java api 
https://github.com/eugenp/tutorials/tree/master/persistence-modules/java-cassandra

https://stackoverflow.com/questions/24949676/difference-between-partition-key-composite-key-and-clustering-key-in-cassandra

** imagine Cassandra as a giant HashMap
the Partition keys play the role of that key in map,So each query needs to have them specified. 
clustering keys (columns, which are optional) help in further narrowing your query search 

** One table can have only one combination of same partition key and clustering key

https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlWriteUpdate.html

https://stackoverflow.com/questions/36328063/how-to-return-a-custom-object-from-a-spring-data-jpa-group-by-query

https://stackoverflow.com/questions/44448899/spring-data-for-apache-cassandra-converts-java-time-localdatetime-to-utc

==========================

desc user_viewed;


=========================

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-cassandra</artifactId>
</dependency>


=========================


@Configuration
public class CassandraConfig extends AbstractCassandraConfiguration {

    @Value("${cassandra.contactpoints}")
    private String contactPoints;

    @Value("${cassandra.port}")
    private int port;

    @Value("${cassandra.keyspace}")
    private String keySpace;

    @Value("${cassandra.basepackages}")
    private String basePackages;

    public SchemaAction getSchemaAction() {
        return SchemaAction.NONE;
    }

    @Override
    protected String getKeyspaceName() {
        return keySpace;
    }

    @Override
    public String[] getEntityBasePackages() {
        return new String[]{basePackages};
    }

    @Bean
    public CassandraClusterFactoryBean cluster() {
        CassandraClusterFactoryBean cluster = new CassandraClusterFactoryBean();
        cluster.setContactPoints(contactPoints);
        cluster.setPort(port);
        return cluster;
    }

    @Bean("cassandraSession")
    public Session cassandraSession() {
        return getRequiredSession();
    }
}


==========================




@Table("user_viewed")
public class UserViewed {

    @PrimaryKeyColumn(name = "contract_id", type = PrimaryKeyType.PARTITIONED, ordinal = 0)
    private String contractId;

    @PrimaryKeyColumn(name = "user_id", type = PrimaryKeyType.PARTITIONED, ordinal = 1)
    private String userId;

    @PrimaryKeyColumn(name = "question_id", type = PrimaryKeyType.CLUSTERED, ordinal = 2)
    private long questionId;

    @PrimaryKeyColumn(name = "created_at", type = PrimaryKeyType.CLUSTERED, ordinal = 3)
    private LocalDateTime createdAt = LocalDateTime.now();

    @Transient
    private long count;

}



==========================

@Repository
public class UserViewedRepoImpl implements UserViewedRepo {

    @Autowired
    private CassandraOperations cassandraTemplate;

    @Autowired
    private Session session;

    @Override
    public List<UserViewed> findAllByMerchantAndUserAndQuestion(String contractId, String userId, long questionId) {
        return cassandraTemplate.select(Query.query(Criteria.where("contractId").is(contractId))
                .and(Criteria.where("userId").is(userId))
                .and(Criteria.where("questionId").is(questionId)), UserViewed.class);
    }

    @Override
    public List<UserViewed> findGroupedQuestionByMerchantAndUser(String contractId, String userId) {
        String query = "Select question_id,count(*) as count from user_viewed " +
                " where contract_id = '"+contractId+"' and user_id = '"+userId+"' group by question_id";
        ResultSet rs = session.execute(query);
        List<UserViewed> userVieweds = new ArrayList<UserViewed>();
        for (Row row : rs) {
            UserViewed data = new UserViewed(row.getLong("question_id"), row.getLong("count"));
            userVieweds.add(data);
        }
        return userVieweds;
    }

    @Override
    public void insert(UserViewed userViewed) {
        cassandraTemplate.insert(userViewed);
    }

    /*cassandraTemplate.update(
            Query.query(Criteria.where("contractId").is(contractId)),
            Update.empty().increment("count"), UserViewed.class);*/
}

==========================
